# You can use any Jenkins Job Builder features here, the project below is just
# a full-fledged example of a basic setup for building packages and running
# autopkgtest on them across a set of releases and architectures.
#
# For upstream documentation, see:
# http://docs.openstack.org/infra/jenkins-job-builder/
#
# See jenkaas_jobs/yaml/defaults.yaml for a set of default values for some
# parameters. You can override any of them here. Some of them may make sense
# to override on a per-project basis, others only make sense globally.

- project:
    # An arbitrary name for the project.
    name: libertine-scope

    ########## Global variables ##########
    # The variables below apply globally to the whole jenkins setup.

    # Your internal jenkins address.
    backend_url: http://libertine-jenkins-be.internal:8080/libertine

    # Your CI bot Launchpad username.
    bot_username: libertine-ci-bot
    bot_email: Libertine CI Bot <libertine-ci-bot@canonical.com>

    # This needs to be a comma-separated list of quoted LP teams and/or users.
    allowed_users: |
        "libertine-team"

    # A space-separated list of packages to install on build slaves in addition
    # to the default list. Use this if, for example, your debian/rules clean
    # target needs something specific.
    install_packages: ''

    # The list of all slaves available in your jenkins instance. Currently only
    # the run-commands job uses that list.
    all_slaves:
    - jenkins-slave-0
    - jenkins-slave-2

    # The list of slaves to create chroots and perform builds on.
    build_slaves:
    - jenkins-slave-0
    - jenkins-slave-2

    # See defaults.yaml
    build_releases: &build_releases
    - xenial+overlay
    - vivid+overlay

    # See defaults.yaml
    build_architectures:
    - amd64
    - i386

    # This filter is applied when preparing chroots. Make sure that it results
    # in the right combinations of nodes and releases.
    #
    # Available axes: node, arch and release.
    # chroot-filter:
    #   (node=="jenkins-slave-0").implies(arch=="amd64" || arch=="i386") && (node=="jenkins-slave-2").implies(arch=="amd64" || arch=="i386")

    # This filter is applied to binary package builds, you can limit the
    # arch/node combinations of performed builds.
    #
    # TODO: make into a per-project variable.
    #
    # Available axes: arch and release.
    # build_filter:
    #   '!(arch=="cross-armhf")'

    # See defaults.yaml
    autopkgtest_architectures:
    - amd64
    - i386

    # See defaults.yaml
    autopkgtest_releases: *build_releases

    ########## Per-project variables ##########
    # The values below are default for all the projects, you can override any
    # of them by putting the same key under the entry in the "jobs" key.

    # Default space-separated list of autopkgtest names.
    autopkgtest_names: ''

    # Which autopktests to run on which architectures.
    #
    # Available axes: label, release and testname
    #
    # FIXME: this has to use XML entities for & due to a Jenkins Job Builder
    #        limitation.
    # autopkgtest_filter:
    #   (label=="amd64" &amp;&amp; testname=="test-name.sh") || (label=="phone-armhf" &amp;&amp; testname=="autopilot.sh" &amp;&amp; release=="vivid+overlay")

    # A list of Launchpad projects to configure for CI, each of which can have
    # overrides for the per-project variables above as key-value pairs.
    project:
    - libertine-scope:
        build_releases:
        - vivid+overlay
        - xenial+overlay
    # - your-other-project
    # - even-another-project:
        # You can direct the trigger and CI jobs at a branch different than
        # lp:{project}
        # branch: lp:another-branch

    # You can control which jobs get generated on your instance by modifying
    # the list below.
    jobs:

    # Install, set up and prepare chroots on build slaves.
    - prepare-jobs

    # Set up credentials for interacting with Launchpad.
    # - credentials-jobs

    # Daily maintenance jobs - upgrade slaves and chroots.
    - maintain-jobs

    # Build source and binary packages.
    - build-jobs

    # Run tests on the built packages.
    - test-jobs
        # FIXME: this is the same filter as above, but without entities.
        # autopkgtest_filter:
        #   (label=="amd64" && testname=="test-name.sh") || (label=="phone-armhf" && testname=="autopilot.sh" && release=="vivid+overlay")

    # Generic jobs for interacting with launchpad.
    - launchpad-jobs

    # Flash Touch devices.
    # - device-flash

    # The actual trigger and -ci jobs are generated by expanding {project}
    # from the list of projects above.
    - lp-{project}

    # If you want to autoland all projects defined above, enable the following line, which will
    # result in autolanding for your-project, your-other-project, and even-another-project in
    # their respective branches.
    - lp-{project}-autolanding
